/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package com.swifta.sub.mats.operation.provisioning.v1_0;

import java.math.BigDecimal;
import java.util.logging.Logger;

import org.apache.axiom.om.OMAbstractFactory;
import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.OMFactory;
import org.apache.axiom.om.OMNamespace;
import org.apache.axis2.Constants;
import org.apache.axis2.addressing.EndpointReference;
import org.apache.axis2.client.Options;
import org.apache.axis2.client.ServiceClient;
import org.apache.axis2.transport.http.HTTPConstants;
import org.apache.axis2.wsdl.WSDLConstants;

import com.swifta.provisioning.utils.ServiceImpl;
import com.swifta.sub.mats.operation.provisioning.v1.Activationresponse;
import com.swifta.sub.mats.operation.provisioning.v1.AddProfileThresholdrequestresponse;
import com.swifta.sub.mats.operation.provisioning.v1.AddProfilerequestresponse;
import com.swifta.sub.mats.operation.provisioning.v1.Changepasswordrequestresponse;
import com.swifta.sub.mats.operation.provisioning.v1.DeleteProfileThresholdrequestresponse;
import com.swifta.sub.mats.operation.provisioning.v1.Deletecommissionrequestresponse;
import com.swifta.sub.mats.operation.provisioning.v1.Deletefeerequestresponse;
import com.swifta.sub.mats.operation.provisioning.v1.EditProfileThresholdrequestresponse;
import com.swifta.sub.mats.operation.provisioning.v1.EditProfilerequestresponse;
import com.swifta.sub.mats.operation.provisioning.v1.Editcommissionrequestresponse;
import com.swifta.sub.mats.operation.provisioning.v1.Editfeerequestresponse;
import com.swifta.sub.mats.operation.provisioning.v1.Linkaccountrequestresponse;
import com.swifta.sub.mats.operation.provisioning.v1.ParameterExtension;
import com.swifta.sub.mats.operation.provisioning.v1.PasswordResetrequestresponse;
import com.swifta.sub.mats.operation.provisioning.v1.Registrationrequestresponse;
import com.swifta.sub.mats.operation.provisioning.v1.RemoveProfilePermissionrequestresponse;
import com.swifta.sub.mats.operation.provisioning.v1.RemoveProfilerequestresponse;
import com.swifta.sub.mats.operation.provisioning.v1.Servicecommissionrequestresponse;
import com.swifta.sub.mats.operation.provisioning.v1.Servicefeerequestresponse;
import com.swifta.sub.mats.operation.provisioning.v1.SetDefaultaccountrequestresponse;
import com.swifta.sub.mats.operation.provisioning.v1.SetProfilePermissionrequestresponse;
import com.swifta.sub.mats.operation.provisioning.v1.UnLinkaccountrequestresponse;
import com.swifta.sub.mats.operation.provisioning.v1.Webauthenticationrequestresponse;
import com.swifta.sub.mats.serviceinterface.DataResponse;

/**
 * This class was generated by Apache CXF 3.0.1 2015-04-16T11:57:37.610+01:00
 * Generated source version: 3.0.1
 * 
 */

@javax.jws.WebService(serviceName = "provisioning", portName = "ProvisioningPort", targetNamespace = "http://swifta.com/sub/mats/operation/provisioning/v1.0", wsdlLocation = "/home/ec2-user/wsdl/Provisioning.wsdl",
// wsdlLocation =
// "/Users/modupealadeojebi/Documents/java2wsdl/version1/PaymentSystemAggregator/target/generated/wsdl/Provisioning.wsdl",
endpointInterface = "com.swifta.sub.mats.operation.provisioning.v1_0.Provisioning")
public class ProvisioningPortImpl implements Provisioning {

	private static final Logger LOG = Logger
			.getLogger(ProvisioningPortImpl.class.getName());

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.swifta.sub.mats.operation.provisioning.v1_0.Provisioning#
	 * removeProfilePermission(java.lang.String loggedinUser ,)java.lang.String
	 * profilename ,)int profileid ,)java.util.List<java.lang.String> operation
	 * )*
	 */
	public com.swifta.sub.mats.operation.provisioning.v1.RemoveProfilePermissionrequestresponse removeProfilePermission(
			java.lang.String loggedinUser, java.lang.String profilename,
			int profileid, java.util.List<java.lang.String> operation) {
		LOG.info("Executing operation removeProfilePermission");
		System.out.println(loggedinUser);
		System.out.println(profilename);
		System.out.println(profileid);
		System.out.println(operation);
		try {
			com.swifta.sub.mats.operation.provisioning.v1.RemoveProfilePermissionrequestresponse removeProfilePermissionrequestresponse = new RemoveProfilePermissionrequestresponse();

			DataResponse dataResponse = ServiceImpl.removeProfilePermission(
					loggedinUser, profilename, profileid, operation);

			removeProfilePermissionrequestresponse.setResponsecode(dataResponse
					.getStatusMessage());

			removeProfilePermissionrequestresponse
					.setResponsemessage(dataResponse.getStatusDescription());

			return removeProfilePermissionrequestresponse;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.swifta.sub.mats.operation.provisioning.v1_0.Provisioning#removeProfile
	 * (java.lang.String loggedinUser ,)java.lang.String profilename ,)int
	 * profileid )*
	 */
	public com.swifta.sub.mats.operation.provisioning.v1.RemoveProfilerequestresponse removeProfile(
			java.lang.String loggedinUser, java.lang.String profilename,
			int profileid) {
		LOG.info("Executing operation removeProfile");
		System.out.println(loggedinUser);
		System.out.println(profilename);
		System.out.println(profileid);
		try {
			com.swifta.sub.mats.operation.provisioning.v1.RemoveProfilerequestresponse removeProfilerequestresponse = new RemoveProfilerequestresponse();

			DataResponse dataResponse = ServiceImpl.removeProfile(loggedinUser,
					profilename, profileid);

			removeProfilerequestresponse.setResponsecode(dataResponse
					.getStatusMessage());

			removeProfilerequestresponse.setResponsemessage(dataResponse
					.getStatusDescription());

			return removeProfilerequestresponse;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.swifta.sub.mats.operation.provisioning.v1_0.Provisioning#
	 * setProfilePermission(java.lang.String loggedinUser ,)java.lang.String
	 * profilename ,)int profileid ,)java.util.List<java.lang.String> operation
	 * )*
	 */
	public com.swifta.sub.mats.operation.provisioning.v1.SetProfilePermissionrequestresponse setProfilePermission(
			java.lang.String loggedinUser, java.lang.String profilename,
			int profileid, java.util.List<java.lang.String> operation) {
		LOG.info("Executing operation setProfilePermission");
		System.out.println(loggedinUser);
		System.out.println(profilename);
		System.out.println(profileid);
		System.out.println(operation);
		try {
			SetProfilePermissionrequestresponse setProfilePermissionrequestresponse = new SetProfilePermissionrequestresponse();

			DataResponse dataResponse = ServiceImpl.setProfilePermission(
					loggedinUser, profilename, profileid, operation);

			setProfilePermissionrequestresponse.setResponsecode(dataResponse
					.getStatusMessage());

			setProfilePermissionrequestresponse.setResponsemessage(dataResponse
					.getStatusDescription());

			return setProfilePermissionrequestresponse;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.swifta.sub.mats.operation.provisioning.v1_0.Provisioning#addProfile
	 * (java.lang.String loggedinUser ,)java.lang.String profilename ,)int
	 * profiletypeid )*
	 */
	public com.swifta.sub.mats.operation.provisioning.v1.AddProfilerequestresponse addProfile(
			java.lang.String loggedinUser, java.lang.String profilename,
			int profiletypeid) {
		LOG.info("Executing operation addProfile");
		System.out.println(loggedinUser);
		System.out.println(profilename);
		System.out.println(profiletypeid);
		try {
			com.swifta.sub.mats.operation.provisioning.v1.AddProfilerequestresponse addProfilerequestresponse = new AddProfilerequestresponse();

			DataResponse dataResponse = ServiceImpl.addProfile(loggedinUser,
					profilename, profiletypeid);

			addProfilerequestresponse.setResponsecode(dataResponse
					.getStatusMessage());

			addProfilerequestresponse.setResponsemessage(dataResponse
					.getStatusDescription());

			return addProfilerequestresponse;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.swifta.sub.mats.operation.provisioning.v1_0.Provisioning#
	 * suspendaccountholder(java.lang.String loggedinUser ,)java.lang.String
	 * resourceid ,)java.lang.String confirmcredential )*
	 */
	public com.swifta.sub.mats.operation.provisioning.v1.Suspendaccountholderrequestresponse suspendaccountholder(
			java.lang.String loggedinUser, java.lang.String resourceid,
			java.lang.String confirmcredential) {
		LOG.info("Executing operation suspendaccountholder");
		System.out.println(loggedinUser);
		System.out.println(resourceid);
		System.out.println(confirmcredential);
		try {
			com.swifta.sub.mats.operation.provisioning.v1.Suspendaccountholderrequestresponse _return = null;
			return _return;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.swifta.sub.mats.operation.provisioning.v1_0.Provisioning#linkaccount
	 * (java.lang.String loggedinUser ,)java.lang.String
	 * initiatinguserresourceid ,)java.lang.String childuserresourceid ,)int
	 * profileid ,)java.lang.String paraentaccountresourceid )*
	 */
	public com.swifta.sub.mats.operation.provisioning.v1.Linkaccountrequestresponse linkaccount(
			java.lang.String loggedinUser,
			java.lang.String initiatinguserresourceid,
			java.lang.String childuserresourceid, int profileid,
			java.lang.String paraentaccountresourceid) {
		LOG.info("Executing operation linkaccount");
		System.out.println(loggedinUser);
		System.out.println(initiatinguserresourceid);
		System.out.println(childuserresourceid);
		System.out.println(profileid);
		System.out.println(paraentaccountresourceid);
		try {
			Linkaccountrequestresponse linkaccountresponse = new Linkaccountrequestresponse();

			DataResponse dataResponse = ServiceImpl.linkaccountrequest(
					loggedinUser, childuserresourceid,
					paraentaccountresourceid, initiatinguserresourceid,
					profileid);

			linkaccountresponse
					.setResponsecode(dataResponse.getStatusMessage());
			linkaccountresponse.setResponsemessage(dataResponse
					.getStatusDescription());

			return linkaccountresponse;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.swifta.sub.mats.operation.provisioning.v1_0.Provisioning#
	 * addProfileThreshold(java.lang.String loggedinUser ,)java.lang.String
	 * profilename ,)java.util.List<java.lang.String> action ,)int profileid
	 * ,)int thresholdtypeid ,)int profiletypeid )*
	 */
	public com.swifta.sub.mats.operation.provisioning.v1.AddProfileThresholdrequestresponse addProfileThreshold(
			java.lang.String loggedinUser, java.lang.String profilename,
			java.util.List<java.lang.Integer> action, int profileid,
			int thresholdtypeid, int profiletypeid, java.lang.String value) {
		LOG.info("Executing operation addProfileThreshold");
		System.out.println(loggedinUser);
		System.out.println(profilename);
		System.out.println(action);
		System.out.println(profileid);
		System.out.println(thresholdtypeid);
		System.out.println(profiletypeid);
		System.out.println(value);
		try {
			com.swifta.sub.mats.operation.provisioning.v1.AddProfileThresholdrequestresponse addProfileThresholdrequestresponse = new AddProfileThresholdrequestresponse();

			DataResponse dataResponse = ServiceImpl.addProfileThreshold(
					loggedinUser, profilename, profileid, action,
					thresholdtypeid, profiletypeid, value);

			addProfileThresholdrequestresponse.setResponsecode(dataResponse
					.getStatusMessage());

			addProfileThresholdrequestresponse.setResponsemessage(dataResponse
					.getStatusDescription());

			return addProfileThresholdrequestresponse;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.swifta.sub.mats.operation.provisioning.v1_0.Provisioning#registration
	 * (java.lang.String loggedinUser ,)java.lang.String username
	 * ,)java.lang.String msisdn ,)java.lang.String email ,)int profileid ,)int
	 * bankcodeid ,)java.lang.String bankaccount ,)java.lang.String
	 * clearingnumber
	 * ,)com.swifta.sub.mats.operation.provisioning.v1.Accountholderdetails
	 * accountholderdetails ,)java.lang.String currencyid ,)java.lang.String
	 * bankdomainnameid ,)java.lang.String termscondition
	 * ,)java.util.List<com.swifta
	 * .sub.mats.operation.provisioning.v1.Securityquestions> securityquestions
	 * )*
	 */
	public com.swifta.sub.mats.operation.provisioning.v1.Registrationrequestresponse registration(
			java.lang.String loggedinUser,
			java.lang.String username,
			java.lang.String msisdn,
			java.lang.String email,
			int profileid,
			int bankcodeid,
			java.lang.String bankaccount,
			java.lang.String clearingnumber,
			com.swifta.sub.mats.operation.provisioning.v1.Accountholderdetails accountholderdetails,
			java.lang.String currencyid,
			java.lang.String bankdomainnameid,
			java.lang.String termscondition,
			java.util.List<com.swifta.sub.mats.operation.provisioning.v1.Securityquestions> securityquestions) {
		LOG.info("Executing operation registration");
		System.out.println(loggedinUser);
		System.out.println(username);
		System.out.println(msisdn);
		System.out.println(email);
		System.out.println(profileid);
		System.out.println(bankcodeid);
		System.out.println(bankaccount);
		System.out.println(clearingnumber);
		System.out.println(accountholderdetails);
		System.out.println(currencyid);
		System.out.println(bankdomainnameid);
		System.out.println(termscondition);
		System.out.println(securityquestions);
		try {
			com.swifta.sub.mats.operation.provisioning.v1.Registrationrequestresponse registrationrequestresponse = new Registrationrequestresponse();

			LOG.info("registrationDetails");
			LOG.info("loggedInuser:::::::" + loggedinUser);
			DataResponse dataResponse = ServiceImpl.registration(loggedinUser,
					username, msisdn, email, profileid, bankcodeid,
					bankaccount, clearingnumber, accountholderdetails,
					currencyid, bankdomainnameid, termscondition,
					securityquestions);

			registrationrequestresponse.setResponsecode(dataResponse
					.getStatusMessage());

			registrationrequestresponse.setResponsemessage(dataResponse
					.getStatusDescription());

			ParameterExtension parameterExtension = new ParameterExtension();
			parameterExtension.getExtensionparam().add(
					dataResponse.getProfilename());
			registrationrequestresponse
					.setParameterextension(parameterExtension);

			return registrationrequestresponse;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.swifta.sub.mats.operation.provisioning.v1_0.Provisioning#
	 * addcustodyaccount(java.lang.String loggedinUser ,)java.lang.String
	 * currencycode ,)java.lang.String bankcode ,)java.lang.String accountnumber
	 * ,)java.lang.String accountname ,)java.lang.String bankdomain )*
	 */
	public com.swifta.sub.mats.operation.provisioning.v1.Addcustodyaccountrequestresponse addcustodyaccount(
			java.lang.String loggedinUser, java.lang.String currencycode,
			java.lang.String bankcode, java.lang.String accountnumber,
			java.lang.String accountname, java.lang.String bankdomain) {
		LOG.info("Executing operation addcustodyaccount");
		System.out.println(loggedinUser);
		System.out.println(currencycode);
		System.out.println(bankcode);
		System.out.println(accountnumber);
		System.out.println(accountname);
		System.out.println(bankdomain);
		try {
			com.swifta.sub.mats.operation.provisioning.v1.Addcustodyaccountrequestresponse _return = null;
			return _return;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.swifta.sub.mats.operation.provisioning.v1_0.Provisioning#setparentaccount
	 * (java.lang.String loggedinUser ,)java.lang.String userresourceid
	 * ,)java.lang.String paraentaccountresourceid ,)java.lang.String reason )*
	 */
	public com.swifta.sub.mats.operation.provisioning.v1.Setparentrequestresponse setparentaccount(
			java.lang.String loggedinUser, java.lang.String userresourceid,
			java.lang.String paraentaccountresourceid, java.lang.String reason) {
		LOG.info("Executing operation setparentaccount");
		System.out.println(loggedinUser);
		System.out.println(userresourceid);
		System.out.println(paraentaccountresourceid);
		System.out.println(reason);
		try {
			com.swifta.sub.mats.operation.provisioning.v1.Setparentrequestresponse _return = null;
			return _return;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.swifta.sub.mats.operation.provisioning.v1_0.Provisioning#webauthenticate
	 * (java.lang.String resourceid ,)java.lang.String password )*
	 */
	public Webauthenticationrequestresponse webauthenticate(
			java.lang.String resourceid, java.lang.String password) {
		LOG.info("Executing operation webauthenticate");
		System.out.println(resourceid);
		System.out.println(password);
		try {
			Webauthenticationrequestresponse _return = null;

			return _return;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.swifta.sub.mats.operation.provisioning.v1_0.Provisioning#unlinkaccount
	 * (java.lang.String loggedinUser ,)java.lang.String
	 * initiatinguserresourceid ,)java.lang.String childuserresourceid ,)int
	 * profileid ,)java.lang.String paraentaccountresourceid )*
	 */
	public com.swifta.sub.mats.operation.provisioning.v1.UnLinkaccountrequestresponse unlinkaccount(
			java.lang.String loggedinUser,
			java.lang.String initiatinguserresourceid,
			java.lang.String childuserresourceid, int profileid,
			java.lang.String paraentaccountresourceid) {
		LOG.info("Executing operation unlinkaccount");
		System.out.println(loggedinUser);
		System.out.println(initiatinguserresourceid);
		System.out.println(childuserresourceid);
		System.out.println(profileid);
		System.out.println(paraentaccountresourceid);
		try {
			UnLinkaccountrequestresponse unlinkaccountresponse = new UnLinkaccountrequestresponse();

			DataResponse dataResponse = ServiceImpl.unlinkaccountrequest(
					loggedinUser, childuserresourceid,
					paraentaccountresourceid, initiatinguserresourceid,
					profileid);

			unlinkaccountresponse.setResponsecode(dataResponse
					.getStatusMessage());
			unlinkaccountresponse.setResponsemessage(dataResponse
					.getStatusDescription());

			return unlinkaccountresponse;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.swifta.sub.mats.operation.provisioning.v1_0.Provisioning#
	 * activationrequest(java.lang.String loggedinUser ,)java.lang.String
	 * resourceid ,)com.swifta.sub.mats.operation.provisioning.v1.Credentials
	 * credential ,)java.lang.String securityquestionanswer ,)java.lang.String
	 * identificationno ,)java.lang.String bankdomainid ,)java.lang.String
	 * currency )*
	 */
	public com.swifta.sub.mats.operation.provisioning.v1.Activationresponse activationrequest(
			java.lang.String loggedinUser,
			java.lang.String resourceid,
			com.swifta.sub.mats.operation.provisioning.v1.Credentials credential,
			java.lang.String securityquestionanswer,
			java.lang.String identificationno, java.lang.String bankdomainid,
			java.lang.String currency) {
		LOG.info("Executing operation activationrequest");
		System.out.println(loggedinUser);
		System.out.println(resourceid);
		System.out.println(credential);
		System.out.println(securityquestionanswer);
		System.out.println(identificationno);
		System.out.println(bankdomainid);
		System.out.println(currency);
		try {
			com.swifta.sub.mats.operation.provisioning.v1.Activationresponse activationresponse = new Activationresponse();

			DataResponse dataResponse = ServiceImpl.activationrequest(
					loggedinUser, resourceid, credential,
					securityquestionanswer, identificationno, bankdomainid,
					currency);

			activationresponse.setResponsemessage(dataResponse
					.getStatusMessage());

			activationresponse.setFirstname(dataResponse.getFirstname());
			activationresponse.setProfilename(dataResponse.getProfilename());

			return activationresponse;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.swifta.sub.mats.operation.provisioning.v1_0.Provisioning#
	 * setupservicefeesandcommission(java.lang.String loggedinUser
	 * ,)java.lang.String userresourceid
	 * ,)com.swifta.sub.mats.operation.provisioning.v1.ServiceFeeConditionTypes
	 * servicefeecondition
	 * ,)com.swifta.sub.mats.operation.provisioning.v1.ServiceFeeModelTypes
	 * servicefeemodel
	 * ,)java.util.List<com.swifta.sub.mats.operation.provisioning
	 * .v1.ServiceFees> servicefeedetails
	 * ,)java.util.List<com.swifta.sub.mats.operation
	 * .provisioning.v1.ServiceCommission> servicecommissiondetails )*
	 */
	// public
	// com.swifta.sub.mats.operation.provisioning.v1.Servicefeeandcomissionrequestresponse
	// setupservicefeesandcommission(
	// java.lang.String loggedinUser,
	// java.lang.String userresourceid,
	// com.swifta.sub.mats.operation.provisioning.v1.ServiceFeeConditionTypes
	// servicefeecondition,
	// com.swifta.sub.mats.operation.provisioning.v1.ServiceFeeModelTypes
	// servicefeemodel,
	// java.util.List<com.swifta.sub.mats.operation.provisioning.v1.ServiceFees>
	// servicefeedetails,
	// java.util.List<com.swifta.sub.mats.operation.provisioning.v1.ServiceCommission>
	// servicecommissiondetails) {
	// LOG.info("Executing operation setupservicefeesandcommission");
	// System.out.println(loggedinUser);
	// System.out.println(userresourceid);
	// System.out.println(servicefeecondition);
	// System.out.println(servicefeemodel);
	// System.out.println(servicefeedetails);
	// System.out.println(servicecommissiondetails);
	// try {
	// com.swifta.sub.mats.operation.provisioning.v1.Servicefeeandcomissionrequestresponse
	// servicefeeandcomissionrequestresponse = new
	// Servicefeeandcomissionrequestresponse();
	//
	// DataResponse dataResponse = ServiceImpl.servicefeecommission(
	// loggedinUser, userresourceid, servicefeecondition,
	// servicefeemodel, servicefeedetails,
	// servicecommissiondetails);
	//
	// servicefeeandcomissionrequestresponse.setResponsecode(dataResponse
	// .getStatusMessage());
	//
	// servicefeeandcomissionrequestresponse
	// .setResponsemessage(dataResponse.getStatusDescription());
	//
	// return servicefeeandcomissionrequestresponse;
	// } catch (java.lang.Exception ex) {
	// ex.printStackTrace();
	// throw new RuntimeException(ex);
	// }
	// }

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.swifta.sub.mats.operation.provisioning.v1_0.Provisioning#
	 * setdefaultaccount(java.lang.String loggedinUser ,)java.lang.String
	 * initiatinguserresourceid ,)java.lang.String childuserresourceid
	 * ,)java.lang.String paraentaccountresourceid )*
	 */
	public com.swifta.sub.mats.operation.provisioning.v1.SetDefaultaccountrequestresponse setdefaultaccount(
			java.lang.String loggedinUser,
			java.lang.String initiatinguserresourceid,
			java.lang.String childuserresourceid,
			java.lang.String paraentaccountresourceid) {
		LOG.info("Executing operation setdefaultaccount");
		System.out.println(loggedinUser);
		System.out.println(initiatinguserresourceid);
		System.out.println(childuserresourceid);
		System.out.println(paraentaccountresourceid);
		try {
			com.swifta.sub.mats.operation.provisioning.v1.SetDefaultaccountrequestresponse setDefaultaccountrequestresponse = new SetDefaultaccountrequestresponse();

			DataResponse dataResponse = ServiceImpl.setdefaultaccount(
					loggedinUser, childuserresourceid,
					paraentaccountresourceid, initiatinguserresourceid);

			setDefaultaccountrequestresponse.setResponsecode(dataResponse
					.getStatusMessage());

			setDefaultaccountrequestresponse.setResponsemessage(dataResponse
					.getStatusDescription());

			return setDefaultaccountrequestresponse;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.swifta.sub.mats.operation.provisioning.v1_0.Provisioning#passwordReset
	 * (java.lang.String loggedinUser ,)java.lang.String username
	 * ,)java.lang.String confirmnewpassword )*
	 */
	public com.swifta.sub.mats.operation.provisioning.v1.PasswordResetrequestresponse passwordReset(
			java.lang.String loggedinUser, java.lang.String username,
			java.lang.String confirmnewpassword) {
		LOG.info("Executing operation passwordReset");
		System.out.println(loggedinUser);
		System.out.println(username);
		System.out.println(confirmnewpassword);
		try {
			com.swifta.sub.mats.operation.provisioning.v1.PasswordResetrequestresponse passwordResetrequestresponse = new PasswordResetrequestresponse();

			String esbendpoint = "http://54.173.157.210:8283/services/Provisionservice";

			EndpointReference targetEPR = new EndpointReference(esbendpoint);

			ServiceClient sender = new ServiceClient();

			String statusMessage = "";

			try {

				OMFactory fac = OMAbstractFactory.getOMFactory();

				OMNamespace omNs = fac.createOMNamespace(
						"http://service.ws.um.carbon.wso2.org", "ser");

				OMElement updateCredentialByAdmin = fac.createOMElement(
						"updateCredentialByAdmin", omNs);

				OMElement userNameElement = fac.createOMElement("userName",
						omNs);
				userNameElement.addChild(fac.createOMText(userNameElement,
						username));

				OMElement newCredentialElement = fac.createOMElement(
						"newCredential", omNs);
				newCredentialElement.addChild(fac.createOMText(
						newCredentialElement, confirmnewpassword));

				updateCredentialByAdmin.addChild(userNameElement);
				updateCredentialByAdmin.addChild(newCredentialElement);

				Options options = new Options();
				options.setTo(targetEPR);
				options.setTransportInProtocol(Constants.TRANSPORT_HTTP);
				options.setAction("urn:updateCredentialByAdmin");

				options.setProperty(HTTPConstants.CHUNKED,
						Constants.VALUE_FALSE);

				sender = new ServiceClient();
				sender.setOptions(options);
				OMElement result = sender.sendReceive(updateCredentialByAdmin);

				OMElement firstelement = result.getFirstElement();

				statusMessage = firstelement.getFirstElement().getText();

				passwordResetrequestresponse.setResponsemessage(firstelement
						.getFirstElement().getText());

				passwordResetrequestresponse.setResponsecode("FAILED");

			} catch (Exception e) {
				// TODO Auto-generated catch block
				// e.printStackTrace();
				try {
					System.out
							.println("HTTP status code: "
									+ sender.getLastOperationContext()
											.getMessageContext(
													WSDLConstants.MESSAGE_LABEL_IN_VALUE)
											.getProperty(
													HTTPConstants.MC_HTTP_STATUS_CODE));
					Integer statuscode = (Integer) sender
							.getLastOperationContext()
							.getMessageContext(
									WSDLConstants.MESSAGE_LABEL_IN_VALUE)
							.getProperty(HTTPConstants.MC_HTTP_STATUS_CODE);
					if (statuscode == 202) {
						statusMessage = "PASSWORD_RESET_WAS_SUCCESSFUL";
					} else {
						statusMessage = "REQUEST CANNOT BE COMPLETED AT THIS MOMENT, TRY AGAIN LATER1";
					}
				} catch (Exception e1) {
					statusMessage = "REQUEST CANNOT BE COMPLETED AT THIS MOMENT, TRY AGAIN LATER";
					e1.printStackTrace();
				}
			}

			passwordResetrequestresponse.setResponsecode("COMPLETED");
			passwordResetrequestresponse.setResponsemessage(statusMessage);

			return passwordResetrequestresponse;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.swifta.sub.mats.operation.provisioning.v1_0.Provisioning#addaccount
	 * (java.lang.String loggedinUser ,)java.lang.String accounttype
	 * ,)java.lang.String accountprofileid ,)java.lang.String
	 * accountreferenceprofile )*
	 */
	public com.swifta.sub.mats.operation.provisioning.v1.Addaccountrequestresponse addaccount(
			java.lang.String loggedinUser, java.lang.String accounttype,
			java.lang.String accountprofileid,
			java.lang.String accountreferenceprofile) {
		LOG.info("Executing operation addaccount");
		System.out.println(loggedinUser);
		System.out.println(accounttype);
		System.out.println(accountprofileid);
		System.out.println(accountreferenceprofile);
		try {
			com.swifta.sub.mats.operation.provisioning.v1.Addaccountrequestresponse _return = null;
			return _return;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.swifta.sub.mats.operation.provisioning.v1_0.Provisioning#
	 * addaccounttoexistinguser(java.lang.String loggedinUser ,)java.lang.String
	 * resourceid ,)java.lang.String accounttype ,)java.lang.String profileid
	 * ,)java.lang.String currency )*
	 */
	public com.swifta.sub.mats.operation.provisioning.v1.Addaccounttoexistinguserrequestresponse addaccounttoexistinguser(
			java.lang.String loggedinUser, java.lang.String resourceid,
			java.lang.String accounttype, java.lang.String profileid,
			java.lang.String currency) {
		LOG.info("Executing operation addaccounttoexistinguser");
		System.out.println(loggedinUser);
		System.out.println(resourceid);
		System.out.println(accounttype);
		System.out.println(profileid);
		System.out.println(currency);
		try {
			com.swifta.sub.mats.operation.provisioning.v1.Addaccounttoexistinguserrequestresponse _return = null;
			return _return;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.swifta.sub.mats.operation.provisioning.v1_0.Provisioning#changepassword
	 * (java.lang.String loggedinUser ,)java.lang.String username
	 * ,)java.lang.String newcredentials ,)java.lang.String oldcredentials )*
	 */
	public com.swifta.sub.mats.operation.provisioning.v1.Changepasswordrequestresponse changepassword(
			java.lang.String loggedinUser, java.lang.String username,
			java.lang.String newcredentials, java.lang.String oldcredentials) {
		LOG.info("Executing operation changepassword");
		System.out.println(loggedinUser);
		System.out.println(username);
		System.out.println(newcredentials);
		System.out.println(oldcredentials);
		try {
			Changepasswordrequestresponse changepasswordresponse = new Changepasswordrequestresponse();

			String esbendpoint = "http://54.173.157.210:8283/services/Provisionservice";

			EndpointReference targetEPR = new EndpointReference(esbendpoint);

			ServiceClient sender = new ServiceClient();

			String statusMessage = "";

			try {

				OMFactory fac = OMAbstractFactory.getOMFactory();

				OMNamespace omNs = fac.createOMNamespace(
						"http://service.ws.um.carbon.wso2.org", "ser");

				OMElement ElementupdateCredential = fac.createOMElement(
						"updateCredential", omNs);

				OMElement userNameElement = fac.createOMElement("userName",
						omNs);
				userNameElement.addChild(fac.createOMText(userNameElement,
						username));

				OMElement newCredentialElement = fac.createOMElement(
						"newCredential", omNs);
				newCredentialElement.addChild(fac.createOMText(
						newCredentialElement, newcredentials));

				OMElement oldCredentialElement = fac.createOMElement(
						"oldCredential", omNs);
				oldCredentialElement.addChild(fac.createOMText(
						newCredentialElement, oldcredentials));

				ElementupdateCredential.addChild(userNameElement);
				ElementupdateCredential.addChild(newCredentialElement);
				ElementupdateCredential.addChild(oldCredentialElement);

				Options options = new Options();
				options.setTo(targetEPR);
				options.setTransportInProtocol(Constants.TRANSPORT_HTTP);
				options.setAction("urn:updateCredential");

				options.setProperty(HTTPConstants.CHUNKED,
						Constants.VALUE_FALSE);

				sender = new ServiceClient();
				sender.setOptions(options);
				OMElement result = sender.sendReceive(ElementupdateCredential);

				OMElement firstelement = result.getFirstElement();

				changepasswordresponse.setResponsemessage(firstelement
						.getFirstElement().getText());

				changepasswordresponse.setResponsecode("FAILED");

				// // System.out.println(("First Element " +
				// // result.getFirstElement()
				// // .getChildElements()));
				//
				// System.out.println(firstelement.getFirstElement().getText());
				// // System.out.println("First Element " +
				// result.getChildren());

				return changepasswordresponse;

			} catch (Exception e) {
				try {
					System.out
							.println("HTTP status code: "
									+ sender.getLastOperationContext()
											.getMessageContext(
													WSDLConstants.MESSAGE_LABEL_IN_VALUE)
											.getProperty(
													HTTPConstants.MC_HTTP_STATUS_CODE));
					Integer statuscode = (Integer) sender
							.getLastOperationContext()
							.getMessageContext(
									WSDLConstants.MESSAGE_LABEL_IN_VALUE)
							.getProperty(HTTPConstants.MC_HTTP_STATUS_CODE);
					if (statuscode == 202) {
						statusMessage = "PASSWORD_RESET_WAS_SUCCESSFUL";
					} else {
						statusMessage = "REQUEST CANNOT BE COMPLETED AT THIS MOMENT, TRY AGAIN LATER1";
					}
				} catch (Exception e1) {
					statusMessage = "REQUEST CANNOT BE COMPLETED AT THIS MOMENT, TRY AGAIN LATER";
					e1.printStackTrace();
				}
			}

			changepasswordresponse.setResponsemessage("COMPLETED");

			changepasswordresponse.setResponsemessage(statusMessage);

			return changepasswordresponse;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.swifta.sub.mats.operation.provisioning.v1_0.Provisioning#editProfile
	 * (java.lang.String loggedinUser ,)java.lang.String profilename ,)int
	 * profileid )*
	 */
	public com.swifta.sub.mats.operation.provisioning.v1.EditProfilerequestresponse editProfile(
			java.lang.String loggedinUser, java.lang.String profilename,
			java.lang.String oldprofilename, int profileid) {
		LOG.info("Executing operation editProfile");
		System.out.println(loggedinUser);
		System.out.println(profilename);
		System.out.println(oldprofilename);
		System.out.println(profileid);
		try {
			com.swifta.sub.mats.operation.provisioning.v1.EditProfilerequestresponse editProfilerequestresponse = new EditProfilerequestresponse();

			DataResponse dataResponse = ServiceImpl.editProfile(loggedinUser,
					profilename, profileid);

			editProfilerequestresponse.setResponsecode(dataResponse
					.getStatusMessage());

			editProfilerequestresponse.setResponsemessage(dataResponse
					.getStatusDescription());

			return editProfilerequestresponse;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.swifta.sub.mats.operation.provisioning.v1_0.Provisioning#
	 * deleteProfileThreshold(java.lang.String loggedinUser
	 * ,)java.util.List<java.lang.Integer> action ,)int profileid )*
	 */
	public com.swifta.sub.mats.operation.provisioning.v1.DeleteProfileThresholdrequestresponse deleteProfileThreshold(
			java.lang.String loggedinUser,
			java.util.List<java.lang.Integer> action, int thresholdtypeid,
			int profileid) {
		LOG.info("Executing operation deleteProfileThreshold");
		System.out.println(loggedinUser);
		System.out.println(action);
		System.out.println(profileid);
		System.out.println(thresholdtypeid);
		try {
			com.swifta.sub.mats.operation.provisioning.v1.DeleteProfileThresholdrequestresponse deleteProfileThresholdrequestresponse = new DeleteProfileThresholdrequestresponse();

			DataResponse dataResponse = ServiceImpl.deleteProfileThreshold(
					loggedinUser, profileid, thresholdtypeid, action);

			deleteProfileThresholdrequestresponse.setResponsecode(dataResponse
					.getStatusMessage());

			deleteProfileThresholdrequestresponse
					.setResponsemessage(dataResponse.getStatusDescription());

			return deleteProfileThresholdrequestresponse;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.swifta.sub.mats.operation.provisioning.v1_0.Provisioning#setupcommission
	 * (java.lang.String loggedinUser ,)java.lang.Integer userresourceid
	 * ,)java.lang.Integer commissionsetuptype ,)java.lang.Integer
	 * servicefeepropertiesid ,)java.lang.Integer transactiontypeid
	 * ,)java.util.List
	 * <com.swifta.sub.mats.operation.provisioning.v1.ServiceCommission>
	 * servicecommissiondetails )*
	 */
	public com.swifta.sub.mats.operation.provisioning.v1.Servicecommissionrequestresponse setupcommission(
			java.lang.String loggedinUser,
			java.lang.Integer userresourceid,
			java.lang.Integer commissionsetuptype,
			java.lang.Integer servicefeepropertiesid,
			java.lang.Integer transactiontypeid,
			BigDecimal commissionfeefortrnxfee,
			java.util.List<com.swifta.sub.mats.operation.provisioning.v1.ServiceCommission> servicecommissiondetails) {
		LOG.info("Executing operation setupcommission");
		System.out.println(loggedinUser);
		System.out.println(userresourceid);
		System.out.println(commissionsetuptype);
		System.out.println(servicefeepropertiesid);
		System.out.println(transactiontypeid);
		System.out.println(servicecommissiondetails);
		try {
			com.swifta.sub.mats.operation.provisioning.v1.Servicecommissionrequestresponse servicecommissionresponse = new Servicecommissionrequestresponse();
			DataResponse dataResponse = ServiceImpl.setupcommission(
					loggedinUser, userresourceid, commissionsetuptype,
					servicefeepropertiesid, transactiontypeid,
					commissionfeefortrnxfee, servicecommissiondetails);

			servicecommissionresponse.setResponsecode(dataResponse
					.getStatusMessage());

			servicecommissionresponse.setResponsemessage(dataResponse
					.getStatusDescription());

			return servicecommissionresponse;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.swifta.sub.mats.operation.provisioning.v1_0.Provisioning#
	 * editProfileThreshold(java.lang.String loggedinUser ,)java.lang.String
	 * profilename ,)java.util.List<java.lang.Integer> action ,)int profileid
	 * ,)int thresholdtypeid ,)int profiletypeid ,)java.lang.String value )*
	 */
	public com.swifta.sub.mats.operation.provisioning.v1.EditProfileThresholdrequestresponse editProfileThreshold(
			java.lang.String loggedinUser, java.lang.String profilename,
			java.util.List<java.lang.Integer> action, int profileid,
			int thresholdtypeid, int profiletypeid, java.lang.String value) {
		LOG.info("Executing operation editProfileThreshold");
		System.out.println(loggedinUser);
		System.out.println(profilename);
		System.out.println(action);
		System.out.println(profileid);
		System.out.println(thresholdtypeid);
		System.out.println(profiletypeid);
		System.out.println(value);
		try {
			com.swifta.sub.mats.operation.provisioning.v1.EditProfileThresholdrequestresponse editProfileThresholdrequestresponse = new EditProfileThresholdrequestresponse();

			DataResponse dataResponse = ServiceImpl.editProfileThreshold(
					loggedinUser, profilename, profileid, action,
					thresholdtypeid, profiletypeid, value);

			editProfileThresholdrequestresponse.setResponsecode(dataResponse
					.getStatusMessage());

			editProfileThresholdrequestresponse.setResponsemessage(dataResponse
					.getStatusDescription());

			return editProfileThresholdrequestresponse;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.swifta.sub.mats.operation.provisioning.v1_0.Provisioning#
	 * deleteservicefees(java.lang.String loggedinUser ,)java.lang.Integer
	 * userresourceid ,)java.lang.Integer transactiontypeid )*
	 */
	public com.swifta.sub.mats.operation.provisioning.v1.Deletefeerequestresponse deleteservicefees(
			java.lang.String loggedinUser, java.lang.Integer userresourceid,
			java.lang.Integer transactiontypeid) {
		LOG.info("Executing operation deleteservicefees");
		System.out.println(loggedinUser);
		System.out.println(userresourceid);
		System.out.println(transactiontypeid);
		try {
			com.swifta.sub.mats.operation.provisioning.v1.Deletefeerequestresponse deletefeeresponse = new Deletefeerequestresponse();

			DataResponse dataResponse = ServiceImpl.deleteservicefee(
					loggedinUser, userresourceid, transactiontypeid);

			deletefeeresponse.setResponsecode(dataResponse.getStatusMessage());

			deletefeeresponse.setResponsemessage(dataResponse
					.getStatusDescription());

			return deletefeeresponse;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.swifta.sub.mats.operation.provisioning.v1_0.Provisioning#editcommission
	 * (java.lang.String loggedinUser ,)java.lang.Integer userresourceid
	 * ,)java.lang.Integer commissionsetuptype ,)java.lang.Integer
	 * servicefeepropertiesid ,)java.lang.Integer transactiontypeid
	 * ,)java.util.List
	 * <com.swifta.sub.mats.operation.provisioning.v1.ServiceCommission>
	 * servicecommissiondetails )*
	 */
	public com.swifta.sub.mats.operation.provisioning.v1.Editcommissionrequestresponse editcommission(
			java.lang.String loggedinUser,
			java.lang.Integer userresourceid,
			java.lang.Integer commissionsetuptype,
			java.lang.Integer servicefeepropertiesid,
			java.lang.Integer transactiontypeid,
			java.math.BigDecimal commissionfeefortrnxfee,
			java.util.List<com.swifta.sub.mats.operation.provisioning.v1.ServiceCommission> servicecommissiondetails) {
		LOG.info("Executing operation editcommission");
		System.out.println(loggedinUser);
		System.out.println(userresourceid);
		System.out.println(commissionsetuptype);
		System.out.println(servicefeepropertiesid);
		System.out.println(transactiontypeid);
		System.out.println(servicecommissiondetails);
		try {
			com.swifta.sub.mats.operation.provisioning.v1.Editcommissionrequestresponse editcommissionResponse = new Editcommissionrequestresponse();

			DataResponse dataResponse = ServiceImpl.editcommission(
					loggedinUser, userresourceid, commissionsetuptype,
					servicefeepropertiesid, transactiontypeid,
					commissionfeefortrnxfee, servicecommissiondetails);

			editcommissionResponse.setResponsecode(dataResponse
					.getStatusMessage());

			editcommissionResponse.setResponsemessage(dataResponse
					.getStatusDescription());

			return editcommissionResponse;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.swifta.sub.mats.operation.provisioning.v1_0.Provisioning#editservicefees
	 * (java.lang.String loggedinUser ,)java.lang.Integer userresourceid
	 * ,)java.lang.Integer serviceconfigtype ,)java.lang.Integer
	 * transactiontypeid
	 * ,)java.util.List<com.swifta.sub.mats.operation.provisioning
	 * .v1.ServiceFees> servicefeedetails )*
	 */
	public com.swifta.sub.mats.operation.provisioning.v1.Editfeerequestresponse editservicefees(
			java.lang.String loggedinUser,
			java.lang.Integer userresourceid,
			java.lang.Integer serviceconfigtype,
			java.lang.Integer transactiontypeid,
			java.util.List<com.swifta.sub.mats.operation.provisioning.v1.ServiceFees> servicefeedetails) {
		LOG.info("Executing operation editservicefees");
		System.out.println(loggedinUser);
		System.out.println(userresourceid);
		System.out.println(serviceconfigtype);
		System.out.println(transactiontypeid);
		System.out.println(servicefeedetails);
		try {
			com.swifta.sub.mats.operation.provisioning.v1.Editfeerequestresponse editfeeresponse = new Editfeerequestresponse();

			DataResponse dataResponse = ServiceImpl.editservicefee(
					loggedinUser, userresourceid, serviceconfigtype,
					transactiontypeid, servicefeedetails);

			editfeeresponse.setResponsecode(dataResponse.getStatusMessage());

			editfeeresponse.setResponsemessage(dataResponse
					.getStatusDescription());

			return editfeeresponse;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.swifta.sub.mats.operation.provisioning.v1_0.Provisioning#setupservicefees
	 * (java.lang.String loggedinUser ,)java.lang.Integer userresourceid
	 * ,)java.lang.Integer serviceconfigtype ,)java.lang.Integer
	 * transactiontypeid
	 * ,)java.util.List<com.swifta.sub.mats.operation.provisioning
	 * .v1.ServiceFees> servicefeedetails )*
	 */
	public com.swifta.sub.mats.operation.provisioning.v1.Servicefeerequestresponse setupservicefees(
			java.lang.String loggedinUser,
			java.lang.Integer userresourceid,
			java.lang.Integer serviceconfigtype,
			java.lang.Integer transactiontypeid,
			java.util.List<com.swifta.sub.mats.operation.provisioning.v1.ServiceFees> servicefeedetails) {
		LOG.info("Executing operation setupservicefees");
		System.out.println(loggedinUser);
		System.out.println(userresourceid);
		System.out.println(serviceconfigtype);
		System.out.println(transactiontypeid);
		System.out.println(servicefeedetails);
		try {
			com.swifta.sub.mats.operation.provisioning.v1.Servicefeerequestresponse servicefeeresponse = new Servicefeerequestresponse();

			DataResponse dataResponse = ServiceImpl.setupservicefee(
					loggedinUser, userresourceid, serviceconfigtype,
					transactiontypeid, servicefeedetails);

			servicefeeresponse.setResponsecode(dataResponse.getStatusMessage());

			servicefeeresponse.setResponsemessage(dataResponse
					.getStatusDescription());

			return servicefeeresponse;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.swifta.sub.mats.operation.provisioning.v1_0.Provisioning#deletecommission
	 * (java.lang.String loggedinUser ,)java.lang.Integer userresourceid
	 * ,)java.lang.Integer transactiontypeid )*
	 */
	public com.swifta.sub.mats.operation.provisioning.v1.Deletecommissionrequestresponse deletecommission(
			java.lang.String loggedinUser, java.lang.Integer userresourceid,
			java.lang.Integer servicefeepropertiesid,
			java.lang.Integer transactiontypeid) {
		LOG.info("Executing operation deletecommission");
		System.out.println(loggedinUser);
		System.out.println(userresourceid);
		System.out.println(transactiontypeid);
		try {
			com.swifta.sub.mats.operation.provisioning.v1.Deletecommissionrequestresponse deletecommissionresponse = new Deletecommissionrequestresponse();

			DataResponse dataResponse = ServiceImpl.deletecommission(
					loggedinUser, userresourceid, servicefeepropertiesid,
					transactiontypeid);

			deletecommissionresponse.setResponsecode(dataResponse
					.getStatusMessage());

			deletecommissionresponse.setResponsemessage(dataResponse
					.getStatusDescription());

			return deletecommissionresponse;

		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

}
